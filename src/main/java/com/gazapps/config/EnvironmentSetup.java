package com.gazapps.config;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EnvironmentSetup {
    
    private static final Logger logger = LoggerFactory.getLogger(EnvironmentSetup.class);
    private static Scanner scanner = new Scanner(System.in);
    
    public static class ProviderInfo {
        public final String name;
        public final String envKey;
        public final String description;
        
        public ProviderInfo(String name, String envKey, String description) {
            this.name = name;
            this.envKey = envKey;
            this.description = description;
        }
    }
    
    private static final List<ProviderInfo> PROVIDERS = Arrays.asList(
        new ProviderInfo("Groq", "GROQ_API_KEY", "Fast inference with Llama models"),
        new ProviderInfo("Gemini", "GEMINI_API_KEY", "Google's latest AI model"),
        new ProviderInfo("Claude", "ANTHROPIC_API_KEY", "Anthropic's Claude models"),
        new ProviderInfo("OpenAI", "OPENAI_API_KEY", "GPT models from OpenAI")
    );
    
    public static boolean ensureApiKeysConfigured() {
        logger.info("Checking environment configuration...");
        
        // Check for .env file first
        checkEnvFile();
        
        // Check which providers are configured
        List<String> configuredProviders = getConfiguredProviders();
        
        if (configuredProviders.isEmpty()) {
            logger.warn("‚ùå No LLM providers configured!");
            logger.info("üîß Starting Environment Wizard...");
            return runEnvironmentWizard();
        } else {
            logger.info("Found configured providers: {}", configuredProviders);
        }
        
        // Check workspace
        String workspacePath = getExpandedWorkspacePath();
        if (workspacePath != null) {
            logger.info("Workspace configured: {}", workspacePath);
        }
        
        return true;
    }
    
    private static void checkEnvFile() {
        Path envPath = Paths.get(".env");
        Path configEnvPath = Paths.get("config/.env");
        
        if (!Files.exists(envPath) && !Files.exists(configEnvPath)) {
            logger.debug("No .env file found at: {}", envPath);
        }
    }
    
    private static List<String> getConfiguredProviders() {
        return PROVIDERS.stream()
            .filter(provider -> {
                String value = System.getenv(provider.envKey);
                return value != null && !value.isEmpty() && !value.startsWith("your_");
            })
            .map(provider -> provider.name.toLowerCase())
            .toList();
    }
    
    private static boolean runEnvironmentWizard() {
        System.out.println("\nüßô‚Äç‚ôÇÔ∏è Environment Setup Wizard");
        System.out.println("=====================================");
        System.out.println("JavaCLI needs at least one LLM provider to work.");
        System.out.println("Let's configure your API keys!\n");
        
        Map<String, String> newEnvVars = new HashMap<>();
        boolean hasConfigured = false;
        
        for (ProviderInfo provider : PROVIDERS) {
            System.out.printf("Configure %s? (%s)\n", provider.name, provider.description);
            System.out.print("Enter your API key (or press Enter to skip): ");
            
            String apiKey = scanner.nextLine().trim();
            
            if (!apiKey.isEmpty() && !apiKey.startsWith("your_")) {
                newEnvVars.put(provider.envKey, apiKey);
                System.out.printf("‚úÖ %s configured!\n\n", provider.name);
                hasConfigured = true;
            } else {
                System.out.printf("‚è≠Ô∏è  Skipped %s\n\n", provider.name);
            }
        }
        
        if (hasConfigured) {
            boolean saved = saveEnvironmentVariables(newEnvVars);
            if (saved) {
                System.out.println("üéâ Configuration saved successfully!");
                System.out.println("JavaCLI is ready to use!");
                return true;
            }
        } else {
            System.out.println("‚ùå No providers configured. JavaCLI cannot start.");
            return false;
        }
        
        return false;
    }
    
    private static boolean saveEnvironmentVariables(Map<String, String> envVars) {
        try {
            Path envFile = Paths.get(".env");
            StringBuilder content = new StringBuilder();
            
            content.append("# JavaCLI Environment Configuration\n");
            content.append("# Generated by Environment Setup Wizard\n\n");
            
            for (Map.Entry<String, String> entry : envVars.entrySet()) {
                content.append(entry.getKey()).append("=").append(entry.getValue()).append("\n");
            }
            
            content.append("\n# Application Settings\n");
            content.append("WORKSPACE_PATH=./documents\n");
            content.append("LOG_LEVEL=INFO\n");
            
            Files.write(envFile, content.toString().getBytes());
            
            // Set environment variables for current session
            envVars.forEach((key, value) -> {
                System.setProperty(key, value);
            });
            
            return true;
            
        } catch (IOException e) {
            logger.error("Error saving environment file: {}", e.getMessage());
            return false;
        }
    }
    
    public static String getExpandedWorkspacePath() {
        String workspacePath = System.getenv("WORKSPACE_PATH");
        if (workspacePath == null || workspacePath.isEmpty()) {
            workspacePath = "./documents";
        }
        
        try {
            Path path = Paths.get(workspacePath);
            if (!Files.exists(path)) {
                Files.createDirectories(path);
            }
            return path.toAbsolutePath().toString();
        } catch (IOException e) {
            logger.warn("Error expanding workspace path: {}", e.getMessage());
            return workspacePath;
        }
    }
    
    public static boolean isProviderConfigured(String provider) {
        String envKey = switch (provider.toLowerCase()) {
            case "groq" -> "GROQ_API_KEY";
            case "gemini" -> "GEMINI_API_KEY";
            case "claude" -> "ANTHROPIC_API_KEY";
            case "openai" -> "OPENAI_API_KEY";
            default -> null;
        };
        
        if (envKey == null) return false;
        
        // ‚úÖ KISS FIX: Check both environment variable and system property
        String envValue = System.getenv(envKey);
        if (envValue != null && !envValue.isEmpty() && !envValue.startsWith("your_")) {
            return true;
        }
        
        String propValue = System.getProperty(envKey);
        return propValue != null && !propValue.isEmpty() && !propValue.startsWith("your_");
    }
    
    public static boolean setupProviderInline(String provider) {
        System.out.printf("\nüîß Setting up %s provider:\n", provider);
        System.out.print("Enter your API key: ");
        
        String apiKey = scanner.nextLine().trim();
        
        if (!apiKey.isEmpty() && !apiKey.startsWith("your_")) {
            String envKey = switch (provider.toLowerCase()) {
                case "groq" -> "GROQ_API_KEY";
                case "gemini" -> "GEMINI_API_KEY";
                case "claude" -> "ANTHROPIC_API_KEY";
                case "openai" -> "OPENAI_API_KEY";
                default -> null;
            };
            
            if (envKey != null) {
                System.setProperty(envKey, apiKey);
                System.out.printf("‚úÖ %s configured for current session!\n", provider);
                return true;
            }
        }
        
        System.out.printf("‚ùå Failed to configure %s\n", provider);
        return false;
    }
    
    public static String getCurrentWorkspacePath() {
        return getExpandedWorkspacePath();
    }
    
    public static boolean isWorkspaceConfigured() {
        String workspacePath = getCurrentWorkspacePath();
        try {
            Path path = Paths.get(workspacePath);
            return Files.exists(path) && Files.isDirectory(path);
        } catch (Exception e) {
            return false;
        }
    }
    
    public static boolean setupWorkspace() {
        System.out.println("\nüóÇÔ∏è Workspace Setup:");
        System.out.print("Enter workspace path (or press Enter for default './documents'): ");
        
        String inputPath = scanner.nextLine().trim();
        String workspacePath = inputPath.isEmpty() ? "./documents" : inputPath;
        
        try {
            Path path = Paths.get(workspacePath);
            Files.createDirectories(path);
            
            // Set for current session
            System.setProperty("WORKSPACE_PATH", workspacePath);
            
            System.out.printf("‚úÖ Workspace configured: %s\n", path.toAbsolutePath());
            return true;
            
        } catch (IOException e) {
            System.out.printf("‚ùå Failed to create workspace: %s\n", e.getMessage());
            return false;
        }
    }
    
    public static void cleanup() {
        if (scanner != null) {
            scanner.close();
        }
    }
}
